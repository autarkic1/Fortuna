// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.13;

// This contract takes a bet on if ETH price will be over a user defined price at a future time
// Ideas: (1) add oracles (2) Figure out tracking a user's bets (3) Can users send ERC20s without depositing?
// (4) emergency withdraw activation (5) Add upgradeable proxy
import "https://github.com/OpenZeppelin/openzeppelin-contracts/blob/v4.0.0/contracts/token/ERC20/IERC20.sol";
import "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol";

contract SimpleBet{
    // Protocol constants
    uint8 public PROTOCOL_FEE;
    address OWNER;
    enum Status {
        WAITING_TAKER,
        KILLED,
        IN_PROCESS,
        SETTLED,
        CANCELED
    }

    enum Direction {
        UNDER,
        OVER
    }

    AggregatorV3Interface internal priceFeed;
    
    // struct to store each address's total deposited token balance and # tokens in a bet
    struct Ledger {
        uint depositedBalance;
        uint escrowedBalance;
    }
    // Mapping of mapping to track balances for each token by owner address
    mapping(address => mapping(address => Ledger)) public balances;

    // Mapping to track all of a user's bets;
    // Risks creating an unbounded array that consumes too much gas!!!!!!!!!!!!!!!
    mapping(address => uint256[]) public UserBets;

    uint256 BetNumber;
    
    // this struct stores bets which will be assigned a BetNumber to be mapped to
    struct Bets {
        address Maker;              // address of bet maker
        address Taker;              // address of designated bet taker
        address SkinToken;          // address of erc20 token contract
        uint BetAmount;             // number of bet tokens (careful with decimals)
        uint EndTime;               // Unix Timestamp of when bet should end
        Status BetStatus;           // enum of all possible bet statuses
        Direction MakerDirection;   // Maker direction (over/under bet strike price)
        uint StrikePrice;           // Price around which bet is made (8 decimals)
        bool MakerCancel;           // Has Maker requested the bet to be cancelled?
        bool TakerCancel;           // Has Taker requested the bet to be cancelled?
    }
    // Mapping of all open bets 
    mapping(uint256 => Bets) public AllBets;

    fallback() payable external {
        
    }

    constructor(uint8 _protocolFee) {
        // Because Solidity can't perform decimal mult/div, multiply by PROTOCOL_FEE and divide by 10,000
        // PROTOCOL_FEE of 0001 equals 0.01% fee when above method used
        PROTOCOL_FEE = _protocolFee;
        priceFeed = AggregatorV3Interface(0x9326BFA02ADD2366b30bacB125260Af641031331);
        OWNER = msg.sender;
    }

    receive() payable external {

    }

    function getLatestPrice() public view returns (int) {
        (
            /*uint80 roundID*/,
            int price,
            /*uint startedAt*/,
            /*uint timeStamp*/,
            /*uint80 answeredInRound*/
        ) = priceFeed.latestRoundData();
        return price;
    }
    
    function DepositTokens(address _tokenAddress, uint _amount) public {
        balances[msg.sender][_tokenAddress].depositedBalance += _amount;
        require(IERC20(_tokenAddress).transferFrom(msg.sender, address(this), _amount), "Deposit Failed");
    }

    // Withdraws _amount of tokens if they are avaiable
    function WithdrawTokens(address _tokenAddress, uint _amount) public {
        uint tokensAvailable = balances[msg.sender][_tokenAddress].depositedBalance - balances[msg.sender][_tokenAddress].escrowedBalance;
        require(tokensAvailable >= _amount, "Insufficient user balance");
        balances[msg.sender][_tokenAddress].depositedBalance -= _amount;
        require(IERC20(_tokenAddress).transfer(msg.sender, _amount), "Withdraw Failed");
    }

    // Opens a new bet with freshly deposited tokens
    function DepositAndBet(address _takerAddress, address _tokenAddress, uint _amount, uint32 _time, uint8 _side, uint _strike) public {
        require(_amount > 0, "Bet amount must be greater than 0");
        // should BetNumber be incremented here or later? This logic results in BetNumber[0] having no initialization
        BetNumber++;

        AllBets[BetNumber].Maker = msg.sender;
        AllBets[BetNumber].Taker = _takerAddress;
        AllBets[BetNumber].SkinToken = _tokenAddress;
        AllBets[BetNumber].BetAmount = _amount;
        AllBets[BetNumber].EndTime = block.timestamp + _time;
        AllBets[BetNumber].BetStatus = Status.WAITING_TAKER;
        if(_side == 1) {
            AllBets[BetNumber].MakerDirection = Direction.OVER;
        }else if(_side == 0) {
            AllBets[BetNumber].MakerDirection = Direction.UNDER;
        }else {revert("Invalid Maker Side, must be 0 (Under) or 1 (OVER)");}
        AllBets[BetNumber].StrikePrice = _strike;
        AllBets[BetNumber].MakerCancel = false; 
        AllBets[BetNumber].TakerCancel = false;
        UserBets[msg.sender].push(BetNumber);
        balances[msg.sender][_tokenAddress].depositedBalance += _amount;
        balances[msg.sender][_tokenAddress].escrowedBalance += _amount;
        require(IERC20(_tokenAddress).transferFrom(msg.sender, address(this), _amount), "Deposit Failed");
    }

    function BetWithUserBalance(address _takerAddress, address _tokenAddress, uint _amount, uint32 _time, uint8 _side, uint _strike) public {
        //Check that Maker has required amount of tokens for bet
        require(balances[msg.sender][_tokenAddress].depositedBalance - balances[msg.sender][_tokenAddress].escrowedBalance >= _amount,
         "Insufficient user balance");
        BetNumber++;

        AllBets[BetNumber].Maker = msg.sender;
        AllBets[BetNumber].Taker = _takerAddress;
        AllBets[BetNumber].SkinToken = _tokenAddress;
        AllBets[BetNumber].BetAmount = _amount;
        AllBets[BetNumber].EndTime = block.timestamp + _time;
        AllBets[BetNumber].BetStatus = Status.WAITING_TAKER;
        if(_side == 1) {
            AllBets[BetNumber].MakerDirection = Direction.OVER;
        }else if(_side == 0) {
            AllBets[BetNumber].MakerDirection = Direction.UNDER;
        }else {revert("Invalid Maker Side, must be 0 (UNDER) or 1 (OVER)");}
        AllBets[BetNumber].StrikePrice = _strike;
        AllBets[BetNumber].MakerCancel= false; 
        AllBets[BetNumber].TakerCancel = false;
        UserBets[msg.sender].push(BetNumber);
        balances[msg.sender][_tokenAddress].escrowedBalance += _amount;
    } 

    function CancelBet(uint _betNumber) public {
        address _tokenAddress = AllBets[_betNumber].SkinToken;
        // Check that request was sent by bet Maker
        require(msg.sender == AllBets[_betNumber].Maker, "Only bet Maker can Cancel");
        // check that bet is not taken
        require(AllBets[_betNumber].BetStatus == Status.WAITING_TAKER, "Bet Cannot be Canceled now");
        // check that the amount they want to withdraw is allowed
        require(AllBets[_betNumber].BetAmount <= balances[msg.sender][_tokenAddress].escrowedBalance, "Balance overflow issue");
        // subtract the bet amount from escrowedBalance
        balances[msg.sender][_tokenAddress].escrowedBalance -= AllBets[_betNumber].BetAmount;
        // Change status to "KILLED"
        AllBets[_betNumber].BetStatus = Status.KILLED;
    }

    function DepositAndAcceptBet(uint _betNumber, uint _amount) public {
        // require msg.sender is the Taker
        require(msg.sender == AllBets[_betNumber].Taker, "Only assigned Taker can accept");
        // require that the bet is not taken, killed, or completed
        require(AllBets[_betNumber].BetStatus == Status.WAITING_TAKER, "Bet cannot be accepeted, wrong status");
        // require bet time not passed
        require(AllBets[_betNumber].EndTime > block.timestamp, "Bet cannot be accepted, EndTime has already passed");
        // check the same amount is uesd
        require(_amount == AllBets[_betNumber].BetAmount);
        
        AllBets[_betNumber].BetStatus = Status.IN_PROCESS;
        UserBets[msg.sender].push(BetNumber);
        balances[msg.sender][AllBets[_betNumber].SkinToken].depositedBalance += _amount;
        balances[msg.sender][AllBets[_betNumber].SkinToken].escrowedBalance += _amount;
        require(IERC20(AllBets[_betNumber].SkinToken).transferFrom(msg.sender, address(this), _amount), "Deposit Failed");
    }

    function AcceptBetWithUserBalance(uint _betNumber, uint _amount) public {
        // require msg.sender is the Taker
        require(msg.sender == AllBets[_betNumber].Taker, "Only assigned Taker can accept");
        // require _amount equals BetAmount, consider not requiring user to pass _amount and just getting this from AllBets
        require(_amount == AllBets[_betNumber].BetAmount, "Amount pledged does not match bet amount");
        // require that the bet is not taken, killed, or completed
        require(AllBets[_betNumber].BetStatus == Status.WAITING_TAKER, "Bet cannot be accepeted, wrong status");
        // require bet time not passed
        require(AllBets[_betNumber].EndTime > block.timestamp, "Bet cannot be accepted, EndTime has already passed");
        // check that Taker has required amount of tokens
        require(balances[msg.sender][AllBets[_betNumber].SkinToken].depositedBalance  
            - balances[msg.sender][AllBets[_betNumber].SkinToken].escrowedBalance 
            >= _amount, "Insufficient user balance");
        AllBets[_betNumber].BetStatus = Status.IN_PROCESS;
        UserBets[msg.sender].push(BetNumber);
        balances[msg.sender][AllBets[_betNumber].SkinToken].escrowedBalance += _amount;
    }

    function CloseBet(uint _betNumber) public {
        // check bet status
        require(AllBets[_betNumber].BetStatus == Status.IN_PROCESS, "Bet not closable, wrong status");
        // check correct time has passed
        require(block.timestamp >= AllBets[_betNumber].EndTime, "Bet not closable, EndTime has not passed");
        // check winner
        uint amount = AllBets[_betNumber].BetAmount;
        bool makerWins;

        int CurrentPrice = getLatestPrice();

        if(CurrentPrice > int(AllBets[_betNumber].StrikePrice)){
            if(AllBets[_betNumber].MakerDirection == Direction.OVER){makerWins = true;}
            else {makerWins = false;}
        }else{
            if(AllBets[_betNumber].MakerDirection == Direction.OVER){makerWins = false;}
            else {makerWins = true;}
        }

        if(makerWins){
            AllBets[_betNumber].BetStatus = Status.SETTLED;
            SettleBalances(AllBets[_betNumber].Maker, AllBets[_betNumber].Taker, AllBets[_betNumber].SkinToken, amount);
        }else {
            AllBets[_betNumber].BetStatus = Status.SETTLED;
            SettleBalances(AllBets[_betNumber].Taker, AllBets[_betNumber].Maker, AllBets[_betNumber].SkinToken, amount);
        }
    }

    function SettleBalances(address _winningAddress, address _losingAddress, address _skinToken, uint amount) internal {
        // This should use SafeMath!!!!!!!!!!!!!!
        if(amount < 10000){
            balances[_winningAddress][_skinToken].depositedBalance += amount - 1;
            balances[address(this)][_skinToken].depositedBalance += 1;
        }else {
            balances[_winningAddress][_skinToken].depositedBalance += (amount*(10000-(2*PROTOCOL_FEE)))/10000;
            balances[address(this)][_skinToken].depositedBalance += (amount*PROTOCOL_FEE*2)/10000;
        }
        balances[_winningAddress][_skinToken].escrowedBalance -= amount;
        balances[_losingAddress][_skinToken].depositedBalance -= amount;
        balances[_losingAddress][_skinToken].escrowedBalance -= amount;
    }

    function RequestBetCancel(uint _betNumber) public {
        address _Maker = AllBets[_betNumber].Maker;
        address _Taker = AllBets[_betNumber].Taker;
        // Require that request was sent by Maker or Taker
        require(msg.sender == _Maker || msg.sender == _Taker, "msg.sender not Maker or Taker");
        // Require that bet is in a cancellable state ("IN_PROCESS")
        require(AllBets[_betNumber].BetStatus == Status.IN_PROCESS, "Not cancellable, wrong BetStatus");

        if(msg.sender == _Maker) {
            AllBets[_betNumber].MakerCancel = true;
        }else if(msg.sender == _Taker) {
            AllBets[_betNumber].TakerCancel = true;
        }

        //If Maker and Taker agree to cancel then refund each their tokens
        //If future versions have deposited LINK into an LINK oracle then this may need to be refunded
        if(AllBets[_betNumber].MakerCancel == true && AllBets[_betNumber].TakerCancel == true){
            AllBets[_betNumber].BetStatus = Status.CANCELED;
            balances[_Maker][AllBets[_betNumber].SkinToken].escrowedBalance -= AllBets[_betNumber].BetAmount;
            balances[_Taker][AllBets[_betNumber].SkinToken].escrowedBalance -= AllBets[_betNumber].BetAmount;
        }
    }

    function TransferERC20(address _token, uint256 amount) external{
        require(msg.sender == OWNER, "Only owner can withdraw");
        require(amount <= balances[OWNER][_token].depositedBalance, "Insufficient Funds");
        balances[address(this)][_token].depositedBalance -= amount;
        require(IERC20(_token).transfer(OWNER, amount), "Withdraw Failed");
    }

    function WithdrawEther(uint256 amount) external{
        require(msg.sender == OWNER, "Only owner can withdraw");
        require(amount <= address(this).balance, "Insufficient Funds");
        payable(OWNER).transfer(amount);
    }

    function CheckClosable(uint _betNumber) external view returns(bool) {
        if(block.timestamp >= AllBets[_betNumber].EndTime && AllBets[_betNumber].BetStatus == Status.IN_PROCESS){return true;}
        else{return false;}
    }
}
